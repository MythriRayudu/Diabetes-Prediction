# -*- coding: utf-8 -*-
"""diabeties_prediction_0_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18FdiOaEYGk8CkGdVZjBR3NNhZRG1PzPq
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import GridSearchCV

data=pd.read_csv('/content/diabetes.csv')

## idhi nuv vaduko mythri
#data=pd.read_csv('/content/diabetes.csv')

data.head()

data.hist(figsize=(9,9))
plt.show()

data.describe()

required=data.drop('Outcome',axis=1)
required.plot(kind='kde', subplots=True, layout=(4,4) ,figsize =(15,15))
plt.show()

required.plot(kind='box', subplots=True ,layout=(1,8),figsize =(20,8))
plt.show()

having_false=data.loc[data['Outcome']==0]
having_true=data.loc[data['Outcome']==1]

plt.figure(figsize=(12, 6))
plt.plot(having_false['Pregnancies'])
plt.plot(having_true['Pregnancies'])

def scatter_plot(variable):
    var =data[variable]
    varValue = var.value_counts()
    plt.scatter(varValue.index, varValue)
    plt.xticks(varValue.index, varValue.index.values)
    plt.ylabel("Frequency")
    plt.title(variable)
    plt.show()

scatter_plot('Pregnancies')

"""## Let's look at the distribution of variables according to the target."""

from matplotlib import pyplot
a4_dims = (12, 6)
fig, ax = pyplot.subplots(figsize=a4_dims)
sns.countplot(x='Pregnancies',hue='Outcome',data=data, linewidth=1,ax=ax)

from sklearn.utils import resample

upsampled_data = resample(having_true,
                             replace=True,  # sample with replacement
                            n_samples=500,  # to match majority class
                            random_state=123) 
data = pd.concat([having_false, upsampled_data])

import seaborn as sns
import matplotlib.pyplot as plt


data["Outcome"] = data.Outcome
X = data.drop("Outcome",1)
y = data["Outcome"]
data.head()
plt.figure(figsize=(15,7))
cor = data.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()

cor_target = abs(cor["Outcome"]) #absolute value
#High Correlations
relevant_features = cor_target[cor_target>=0.2]
relevant_features

newdata=data.drop(['BloodPressure', 'SkinThickness', 'Insulin','DiabetesPedigreeFunction'],axis=1)

newdata.head()

data=pd.DataFrame(newdata)

"""<a id = "9"></a><br>
# Normalization
"""

from sklearn.preprocessing import StandardScaler
X = data.iloc[:, 0:4]
Y = data.iloc[:, 4]
nd = StandardScaler()
nd.fit(X)
X =nd.transform(X)
print(Y)

"""<a id = "30"></a><br>
# Models
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split,KFold,cross_val_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import f1_score
from sklearn import model_selection
                  
X = data.iloc[:, 0:4]
Y = data.iloc[:, 4]
X_train, x_test, Y_train, y_test = train_test_split( X, Y, test_size = 0.2, random_state = 100)

#to plot a graph
accuracies ={} 
means={}
randoms={}

"""<a id = "14"></a><br>
# KNN
"""

from sklearn.neighbors import KNeighborsClassifier
knn_params = {'n_neighbors' : range(1,10),
              'weights' : ['uniform', 'distance'],
              'algorithm' : ['auto','ball_tree','kd_tree','brute'],
              'p' : [1,2]
   }
knn=KNeighborsClassifier()
knn_gridcv_model=GridSearchCV(estimator=knn, param_grid=knn_params, cv=5, scoring='accuracy', n_jobs=-1, verbose=2).fit(X_train,Y_train)
print(knn_gridcv_model.best_params_)
print('rf_randomcv_model accuracy score = {}'.format(knn_gridcv_model.best_score_)) 
acc=knn_gridcv_model.best_score_ *100
accuracies['KNN Gridsearch']=acc

"""For a Single person"""

x_test[0:1]

print("input"+str(x_test[0:1])+"\noutput\n"+str(y_test[0:1]))

knn_gridcv_model.predict(x_test[0:1])

"""With Custum Inputs"""

#will get those values in k_test from our webapp input method and

import pandas as pd
 
# list of strings
k_test={'Pregnancies':[9],'Glucose':[72],'BMI':[31.6],'Age':[38]}
 
# Calling DataFrame constructor on list
k_test = pd.DataFrame(k_test)
print(k_test[0:1])

k_test

knn_gridcv_model.predict(k_test)

kfold=model_selection.KFold(n_splits=5)
modelL=KNeighborsClassifier(n_neighbors= 1)
results=model_selection.cross_val_score(modelL,X,Y,cv=kfold)
print(results)
print(results.mean()*100)
mean=results.mean()*100
means['KNN']=mean

"""<a id = "16"></a><br>
# Support Vector Classifier
"""

from sklearn.svm import SVC
svc_params= {'C' : [0.1,0.2,0.3,0.001,0.003],
             'kernel': ['linear','poly','rbf','sigmoid']}
svc=SVC()
svc_gridcv_model=GridSearchCV(estimator=svc, param_grid=svc_params, cv=5, scoring='accuracy', n_jobs=-1, verbose=2).fit(X_train,Y_train)
print(svc_gridcv_model.best_params_)
print('rf_gridcv_model accuracy score = {}'.format(svc_gridcv_model.best_score_)) 
acc=svc_gridcv_model.best_score_ *100
accuracies['SVC Gridsearch']=acc

kfold=model_selection.KFold(n_splits=5)
model=SVC(C=0.1,kernel='linear')
results=model_selection.cross_val_score(model,X,Y,cv=kfold)
print(results)
print(results.mean()*100)
mean=results.mean()*100
means['SVC']=mean

"""<a id = "17"></a><br>
# Comparisons

## GridSearch CV
"""

colors = ["#C06C84", "#5E1742", "#005D8E"]

sns.set_style("whitegrid")
plt.figure(figsize=(8,8))
plt.yticks(np.arange(0,101,5))
plt.ylabel("GridSearch Scores%")
plt.xlabel("\n\n Algorithms")
sns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)
plt.show()

"""## Cross Validation"""

colors = ["#C06C84", "#5E1742", "#005D8E", "#00ADB5","#3E606F","#EFAB1F"]

sns.set_style("whitegrid")
plt.figure(figsize=(8,8))
plt.yticks(np.arange(0,101,5))
plt.ylabel("Cross Validation Scores %")
plt.xlabel("\n\n Algorithms")
sns.barplot(x=list(means.keys()), y=list(means.values()), palette=colors)
plt.show()

import pickle
import os

with open("/content/drive/MyDrive/diabeties_prediction.pkl","wb") as dumped:
  pickle.dump(knn_gridcv_model,dumped)

if os.path.getsize('/content/drive/MyDrive/diabeties_prediction.pkl') > 0:      
  with open('/content/drive/MyDrive/diabeties_prediction.pkl',"rb") as f:    
        unpickler = pickle.Unpickler(f)
        # if file is not empty scores will be equal
        # to the value unpickled
        loaded_model = unpickler.load()

loaded_model.predict(k_test[0:1])

